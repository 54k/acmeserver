package com.acme.server.controller;

import com.acme.engine.application.Context;
import com.acme.engine.ashley.Wired;
import com.acme.engine.ashley.system.EffectController;
import com.acme.server.component.InvulnerableComponent;
import com.acme.server.component.PositionComponent;
import com.acme.server.entity.Type;
import com.acme.server.packet.outbound.EquipPacket;
import com.acme.server.system.PacketSystem;
import com.badlogic.ashley.core.ComponentMapper;
import com.badlogic.ashley.core.Entity;

@Wired
public class InvulnerabilityController extends EffectController {

    private ComponentMapper<InvulnerableComponent> icm;
    private ComponentMapper<PositionComponent> pcm;

    private Context context;

    private InventoryController inventoryController;
    private StatsController statsController;
    private PacketSystem packetSystem;

    public void applyEffect(Entity entity, float duration) {
        if (icm.has(entity)) {
            icm.get(entity).setTime(duration);
        } else {
            context.schedule(() -> {
                entity.add(new InvulnerableComponent(duration));
                getEffectList(entity).apply(this);
            });
        }
    }

    @Override
    public void apply(Entity entity) {
        statsController.addHitPoints(entity, statsController.getMaxHitPoints(entity), true);
        packetSystem.sendToSelfAndRegion(entity, new EquipPacket(entity, Type.FIREFOX.getId()));
    }

    @Override
    public void update(Entity entity, float deltaTime) {
        InvulnerableComponent invulnerableComponent = icm.get(entity);
        invulnerableComponent.decreaseTime(deltaTime);

        if (invulnerableComponent.isReady() || !pcm.get(entity).isSpawned()) {
            getEffectList(entity).remove(this);
        }
    }

    @Override
    public void remove(Entity entity) {
        entity.remove(InvulnerableComponent.class);
        int armor = inventoryController.getEquippedArmor(entity);
        packetSystem.sendToSelfAndRegion(entity, new EquipPacket(entity, armor));
    }
}
